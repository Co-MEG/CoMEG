starts profiling...
NEW ITERATION 
 --------
r: 0 - r_new: 1
|extents[r]|: 4403 - intents[r]: []
  Extent size 12 - intent [818]
  U(G): -7.046735524868296
  U(A): 8.880348808156027
  U: 1.8336132832877308
unexs: [0] r_new: 1 - r: 0 - ptr: 0
extents [   0    1    2 ... 4400 4401 4402] intents [] r 0 rnew 1
  Extent size DID change. IsCannonical: True
r:0 rnew:1
 ISCANNO comparing unex=1.8336132832877308 and unexs[0]==0
  --> Enter recursion with Intent: ['transactinid']...
NEW ITERATION 
 --------
r: 1 - r_new: 2
|extents[r]|: 12 - intents[r]: ['transactinid']
  Extent size 11 - intent [818, 1049]
  U(G): -34.65281938751505
  U(A): 16.64496525784611
  U: -18.007854129668942
unexs: [0, 1.8336132832877308] r_new: 2 - r: 1 - ptr: 1
extents [2381, 2720, 2801, 2868, 2870, 2871, 3382, 3383, 3384, 4031, 4056, 4057] intents [818] r 1 rnew 2
  Extent size DID change. IsCannonical: True
r:1 rnew:2
 ISCANNO comparing unex=-18.007854129668942 and unexs[1]==1.8336132832877308
IsCANNO but no U improvement
inexs: [0, 1.8336132832877308]
r:1 - r_new:2
inexs after pop: [0]
**END FUNCTION
inexs: [0]
r:0 - r_new:2
inexs after pop: []
**END FUNCTION
Timer unit: 1e-09 s

Total time: 1.29059 s
File: /Users/simondelarue/Documents/PhD/Research/Co-Meg/CoMEG/unexpectedness.py
Function: comeg at line 119

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   119                                           def comeg(adjacency, context, context_csc, extents, intents, r=0, y=0, min_support=0, max_support=np.inf, beta=0, 
   120                                                       degs=[], unexs_g=[], unexs_a=[], unexs=[], names_col=[], comp_gen_graph=None):
   121                                               """InClose algorithm using Unexpectedness + IsCannonical function. """
   122                                               
   123                                               global r_new
   124                                               global ptr
   125         2       1000.0    500.0      0.0      r_new = r_new + 1
   126                                               
   127         2       2000.0   1000.0      0.0      print(f'NEW ITERATION \n --------')
   128         2       1000.0    500.0      0.0      print(f'r: {r} - r_new: {r_new}')
   129                                               # ------------------------------------------------
   130         2      48000.0  24000.0      0.0      print(f'|extents[r]|: {len(extents[r])} - intents[r]: {names_col[intents[r]]}')
   131                                               
   132      5886    1816000.0    308.5      0.1      for j in np.arange(context.shape[1])[y:]:
   133      5886     757000.0    128.6      0.1          try:
   134      5884    1310000.0    222.6      0.1              extents[r_new] = []
   135      5884    1005000.0    170.8      0.1              unexs_g[r_new] = 0
   136      5884     971000.0    165.0      0.1              unexs_a[r_new] = 0
   137         2          0.0      0.0      0.0          except IndexError:
   138         2          0.0      0.0      0.0              extents.append([])
   139         2       1000.0    500.0      0.0              unexs_g.append(0)
   140         2          0.0      0.0      0.0              unexs_a.append(0)
   141                                           
   142                                                   # Form a new extent by adding extension of attribute j to current concept extent
   143      5886  281562000.0  47835.9     21.8          ext_j = set(extension([j], context_csc))
   144                                                   #ext_j = set(extension([j], context))
   145      5886  838026000.0 142376.1     64.9          extents[r_new] = list(sorted(set(extents[r]).intersection(ext_j)))
   146      5886    1262000.0    214.4      0.1          len_new_extent = len(extents[r_new])
   147                                                   
   148      4345     836000.0    192.4      0.1          if (len_new_extent >= min_support) and (len_new_extent <= max_support):
   149                                           
   150                                                       # Verify that length of intention of new extent is greater than a threshold (e.g min_support)
   151                                                       # In other words, we only enter the loop if the new extent still has "space" to welcome enough new attributes
   152                                                       # Using this, we can trim all patterns with not enough attributes from the recursion tree
   153      1541  140587000.0  91231.0     10.9              size_intention = len(intention(extents[r_new], context))
   154      1539     250000.0    162.4      0.0              if size_intention >= min_support:
   155                                                               
   156         2       6000.0   3000.0      0.0                  new_intent = list(sorted(set(intents[r]).union(set([j]))))
   157                                                           
   158                                                           # Compute Unexpectedness on pattern (i.e on graph and attributes)
   159                                                           # ------------------------------------------------------------------------------------------------------------
   160         2      18000.0   9000.0      0.0                  print(f'  Extent size {len(extents[r_new])} - intent {new_intent}')
   161         2          0.0      0.0      0.0                  size = len(new_intent)
   162         2    1195000.0 597500.0      0.1                  unex_g = graph_unexpectedness(adjacency[extents[r_new], :][:, extents[r_new]], size, comp_gen_graph)
   163         2       2000.0   1000.0      0.0                  unexs_g[r_new] = unex_g
   164                                                           # Attributes unexpectedness
   165         2      18000.0   9000.0      0.0                  unex_a = attr_unexpectedness(context, new_intent, degs)
   166         2          0.0      0.0      0.0                  unexs_a[r_new] = unex_a
   167                                                           # Total unexpectedness
   168         2          0.0      0.0      0.0                  unex = unex_g + unex_a
   169                                                           #unexs[r_new] = unex
   170         2      12000.0   6000.0      0.0                  print(f'  U(G): {unex_g}')
   171         2       2000.0   1000.0      0.0                  print(f'  U(A): {unex_a}')
   172         2       2000.0   1000.0      0.0                  print(f'  U: {unex}')
   173         2       8000.0   4000.0      0.0                  print(f'unexs: {unexs} r_new: {r_new} - r: {r} - ptr: {ptr}')
   174                                                           # ------------------------------------------------------------------------------------------------------------
   175                                                           
   176         2          0.0      0.0      0.0                  if len_new_extent - len(extents[r]) == 0:
   177                                                               print(f' == comparing unex={unex} and unexs[{ptr}]={unexs[ptr]}')
   178                                                               if unex - unexs[ptr] >= 0:
   179                                                                   print(f'  Extent size did not change -> attribute {names_col[j]} is added to intent.')
   180                                                                   intents[r] = new_intent
   181                                                                   unexs[-1] = unex
   182                                                               else:
   183                                                                   print(f'STOP rec, unexpectedness difference is {unex - unexs[ptr]}')
   184                                                                   print(f'Attribute {names_col[j]} ({j}) does not add any unexpectedness to pattern')
   185                                                                   #extents[r_new].pop(-1) -> no need to change the extent since we are in the block where it did not move by adding attribute
   186                                                                   #intents[r_new].pop(-1) -> at this stage, we only use new-intent, so no need to remove anything from intents parameter
   187                                                                   #raise Exception('end')
   188                                                                   break
   189                                                               
   190                                                           else:
   191         2   20654000.0 10327000.0      1.6                      is_canno = is_cannonical(context, extents, intents, r, j - 1)
   192         2       1000.0    500.0      0.0                      if is_canno:
   193         2     148000.0  74000.0      0.0                          print(f'extents {extents[r]} intents {intents[r]} r {r} rnew {r_new}')
   194         2       4000.0   2000.0      0.0                          print(f'  Extent size DID change. IsCannonical: {is_canno}')
   195         2       1000.0    500.0      0.0                          try:
   196         2       3000.0   1500.0      0.0                              intents[r_new] = []
   197         2       1000.0    500.0      0.0                          except IndexError:
   198         2          0.0      0.0      0.0                              intents.append([])
   199                                           
   200                                                                   #intents[r_new] = new_intent 
   201                                                                   #len_new_intent = len(intents[r_new])
   202                                           
   203         2          0.0      0.0      0.0                          print(f'r:{r} rnew:{r_new}')
   204         2       6000.0   3000.0      0.0                          print(f' ISCANNO comparing unex={unex} and unexs[{ptr}]=={unexs[ptr]}')
   205         1       1000.0   1000.0      0.0                          if unex - unexs[ptr] >= 0 or r == 0:   
   206                                                                       
   207         1          0.0      0.0      0.0                              intents[r_new] = new_intent 
   208         1       1000.0   1000.0      0.0                              len_new_intent = len(intents[r_new])
   209                                           
   210         1          0.0      0.0      0.0                              unexs.append(unex)
   211         1       1000.0   1000.0      0.0                              ptr += 1
   212         1      36000.0  36000.0      0.0                              print(f'  --> Enter recursion with Intent: {names_col[intents[r_new]]}...')
   213         1       1000.0   1000.0      0.0                              comeg(adjacency, context, context_csc, extents, intents, r=r_new, y=j+1, min_support=min_support, 
   214         1          0.0      0.0      0.0                                          max_support=max_support, beta=beta, degs=degs, unexs_g=unexs_g, 
   215         1          0.0      0.0      0.0                                          unexs_a=unexs_a, unexs=unexs, names_col=names_col, comp_gen_graph=comp_gen_graph)
   216                                                                   else:
   217         1       1000.0   1000.0      0.0                              print(f'IsCANNO but no U improvement')
   218         1       5000.0   5000.0      0.0                              break
   219                                                               
   220                                                               else:
   221                                                                   print(f'IsCannonical: False --> do not enter recursion.')
   222                                                               
   223         2      10000.0   5000.0      0.0      print(f'inexs: {unexs}')        
   224         2       3000.0   1500.0      0.0      print(f'r:{r} - r_new:{r_new}')
   225         2       2000.0   1000.0      0.0      unexs.pop(-1)
   226         2       2000.0   1000.0      0.0      ptr -= 1
   227         2       2000.0   1000.0      0.0      print(f'inexs after pop: {unexs}')        
   228         2          0.0      0.0      0.0      print(f'**END FUNCTION')
   229                                               #print(f'**concept: ({[*zip(extents, intents)]})')
   230                                               
   231         2       6000.0   3000.0      0.0      return [*zip(extents, intents)]

